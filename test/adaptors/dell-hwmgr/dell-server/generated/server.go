// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CloudCloudType defines model for CloudCloudType.
type CloudCloudType = interface{}

// ComputeKind defines model for ComputeKind.
type ComputeKind = interface{}

// ComputeRealTime defines model for ComputeRealTime.
type ComputeRealTime = interface{}

// FilterOperator defines model for FilterOperator.
type FilterOperator = interface{}

// ResourceAdminState defines model for ResourceAdminState.
type ResourceAdminState = interface{}

// ResourceAdminStatus defines model for ResourceAdminStatus.
type ResourceAdminStatus = interface{}

// ResourceAvStatus defines model for ResourceAvStatus.
type ResourceAvStatus = interface{}

// ResourceCStatus defines model for ResourceCStatus.
type ResourceCStatus = interface{}

// ResourceOpState defines model for ResourceOpState.
type ResourceOpState = interface{}

// ResourcePStatus defines model for ResourcePStatus.
type ResourcePStatus = interface{}

// ResourcePublic defines model for ResourcePublic.
type ResourcePublic = interface{}

// ResourceSStatus defines model for ResourceSStatus.
type ResourceSStatus = interface{}

// ResourceUStatus defines model for ResourceUStatus.
type ResourceUStatus = interface{}

// ResourceUsageState defines model for ResourceUsageState.
type ResourceUsageState = interface{}

// ApiprotoBaseResource defines model for apiprotoBaseResource.
type ApiprotoBaseResource struct {
	CreatedAt            *string `json:"createdAt,omitempty"`
	CreatedBy            *string `json:"createdBy,omitempty"`
	Description          *string `json:"description,omitempty"`
	Id                   *string `json:"id,omitempty"`
	IsPrivate            *bool   `json:"isPrivate,omitempty"`
	Name                 *string `json:"name,omitempty"`
	ResourceAvailability *string `json:"resourceAvailability,omitempty"`
	Tenant               *string `json:"tenant,omitempty"`
	UpdatedAt            *string `json:"updatedAt,omitempty"`
	Visibility           *string `json:"visibility,omitempty"`
}

// ApiprotoCloud defines model for apiprotoCloud.
type ApiprotoCloud struct {
	CloudDeploymentMode *string                             `json:"cloudDeploymentMode,omitempty"`
	CloudType           *CloudCloudType                     `json:"cloudType,omitempty"`
	ComputeSelectors    *map[string]ApiprotoComputeSelector `json:"computeSelectors,omitempty"`
	MgmtCloudDid        *string                             `json:"mgmtCloudDid,omitempty"`
}

// ApiprotoCompute defines model for apiprotoCompute.
type ApiprotoCompute struct {
	// Bios The version or identifier of the Basic Input/Output System (BIOS) firmware used by the compute resource. BIOS is firmware used to perform hardware initialization during the booting process.
	Bios *string `json:"bios,omitempty"`

	// BmcId The unique identifier for the Baseboard Management Controller (BMC) associated with this compute resource. The BMC is responsible for monitoring and managing the hardware of the server, including remote access and diagnostics.
	BmcId *string `json:"bmcId,omitempty"`

	// DiskSize The size of the disk available to the compute resource, measured in megabytes (MB). This field is particularly relevant for virtual machines, indicating the allocated storage capacity.
	DiskSize *int32       `json:"diskSize,omitempty"`
	Kind     *ComputeKind `json:"kind,omitempty"`
	Lom      *ApiprotoLom `json:"lom,omitempty"`

	// Memory The total memory available in the compute resource, measured in bytes. Memory (RAM) is a critical component for storing data that the CPU accesses during operations.
	Memory *string `json:"memory,omitempty"`

	// NpId The unique identifier for the network processor (NP) associated with this compute resource. This ID is used to reference the NP within the system for networking tasks and configurations.
	NpId       *string              `json:"npId,omitempty"`
	Os         *ApiprotoOs          `json:"os,omitempty"`
	RealTimeOS *ComputeRealTime     `json:"realTimeOS,omitempty"`
	Role       *ApiprotoComputeRole `json:"role,omitempty"`

	// Serial The serial number of the compute resource, typically assigned by the manufacturer. This is a unique identifier that is used for tracking and managing the physical hardware.
	Serial *string `json:"serial,omitempty"`

	// SocketCores The number of cores available per CPU socket in the compute resource. CPU cores are the individual processing units within a CPU that perform computations.
	SocketCores *int32 `json:"socketCores,omitempty"`

	// SocketNum The number of CPU sockets available in the compute resource. A CPU socket is a physical connector on the motherboard that allows a microprocessor (CPU) to be installed.
	SocketNum *int32 `json:"socketNum,omitempty"`
}

// ApiprotoComputeRole defines model for apiprotoComputeRole.
type ApiprotoComputeRole = interface{}

// ApiprotoComputeSelector defines model for apiprotoComputeSelector.
type ApiprotoComputeSelector struct {
	Labels *[]ApiprotoLabel `json:"labels,omitempty"`

	// NumComputes If missing, may be based on policy.
	NumComputes *int32                       `json:"numComputes,omitempty"`
	Role        *ApiprotoComputeSelectorRole `json:"role,omitempty"`
	RpId        *string                      `json:"rpId,omitempty"`
}

// ApiprotoComputeSelectorRole defines model for apiprotoComputeSelectorRole.
type ApiprotoComputeSelectorRole = interface{}

// ApiprotoCreateResourceResp defines model for apiprotoCreateResourceResp.
type ApiprotoCreateResourceResp struct {
	Resource *ApiprotoResource `json:"Resource,omitempty"`
	Resp     *ApiprotoResponse `json:"Resp,omitempty"`
	Tenant   *string           `json:"Tenant,omitempty"`
}

// ApiprotoDeleteResourceResp defines model for apiprotoDeleteResourceResp.
type ApiprotoDeleteResourceResp struct {
	Resp   *ApiprotoResponse `json:"Resp,omitempty"`
	Tenant *string           `json:"Tenant,omitempty"`
}

// ApiprotoDeploymentDB defines model for apiprotoDeploymentDB.
type ApiprotoDeploymentDB struct {
	BPDescription    *string    `json:"BPDescription,omitempty"`
	BlueprintName    *string    `json:"BlueprintName,omitempty"`
	BlueprintVersion *string    `json:"BlueprintVersion,omitempty"`
	DeploymentName   *string    `json:"DeploymentName,omitempty"`
	IsLatest         *bool      `json:"IsLatest,omitempty"`
	LastUpdatedAt    *time.Time `json:"LastUpdatedAt,omitempty"`
	LastUpdatedBy    *string    `json:"LastUpdatedBy,omitempty"`
}

// ApiprotoDeploymentStatus defines model for apiprotoDeploymentStatus.
type ApiprotoDeploymentStatus struct {
	CreateExecution *string `json:"CreateExecution,omitempty"`

	// DeploymentStatus The overall deployment status.
	DeploymentStatus *string `json:"DeploymentStatus,omitempty"`

	// EnvironmentType The environment type. Represents the value of csys-env-type label attached to deployment.
	EnvironmentType   *string `json:"EnvironmentType,omitempty"`
	HasSubDeployments *bool   `json:"HasSubDeployments,omitempty"`

	// InstallationStatus The deployment installation status.
	InstallationStatus *string `json:"InstallationStatus,omitempty"`
	LatestExecution    *string `json:"LatestExecution,omitempty"`

	// LatestExecutionFinishedOperations The finished operations for latest execution of deployment.
	LatestExecutionFinishedOperations *int32 `json:"LatestExecutionFinishedOperations,omitempty"`

	// LatestExecutionStatus The deployment latest execution status.
	LatestExecutionStatus *string `json:"LatestExecutionStatus,omitempty"`

	// LatestExecutionTotalOperations The total operations for latest execution of deployment.
	LatestExecutionTotalOperations *int32 `json:"LatestExecutionTotalOperations,omitempty"`

	// SubEnvironmentsCount The aggregated sub environments count.
	SubEnvironmentsCount *int32 `json:"SubEnvironmentsCount,omitempty"`

	// SubEnvironmentsStatus The aggregated sub environments(deployments) status.
	SubEnvironmentsStatus *string `json:"SubEnvironmentsStatus,omitempty"`

	// SubServicesCount The aggregated sub services count.
	SubServicesCount *int32 `json:"SubServicesCount,omitempty"`

	// SubServicesStatus The aggregated sub services(deployments) status.
	SubServicesStatus *string `json:"SubServicesStatus,omitempty"`
}

// ApiprotoFilter defines model for apiprotoFilter.
type ApiprotoFilter struct {
	Key      *string         `json:"Key,omitempty"`
	Values   *[]string       `json:"Values,omitempty"`
	Operator *FilterOperator `json:"operator,omitempty"`
}

// ApiprotoGetResourceDeploymentsResp defines model for apiprotoGetResourceDeploymentsResp.
type ApiprotoGetResourceDeploymentsResp struct {
	Deployments *[]ApiprotoDeploymentDB `json:"Deployments,omitempty"`
	Id          *string                 `json:"Id,omitempty"`
	Resp        *ApiprotoResponse       `json:"Resp,omitempty"`
	Tenant      *string                 `json:"Tenant,omitempty"`
}

// ApiprotoGetResourceResp defines model for apiprotoGetResourceResp.
type ApiprotoGetResourceResp struct {
	Resource *ApiprotoResource `json:"Resource,omitempty"`
	Resp     *ApiprotoResponse `json:"Resp,omitempty"`
	Tenant   *string           `json:"Tenant,omitempty"`
}

// ApiprotoGetResourceSubscriptionResp defines model for apiprotoGetResourceSubscriptionResp.
type ApiprotoGetResourceSubscriptionResp struct {
	ResourceSubscription *[]ApiprotoResourceSubscriptionResp `json:"ResourceSubscription,omitempty"`
	Resp                 *ApiprotoResponse                   `json:"Resp,omitempty"`
	Tenant               *string                             `json:"Tenant,omitempty"`
}

// ApiprotoGetResourceSubscriptionsResp defines model for apiprotoGetResourceSubscriptionsResp.
type ApiprotoGetResourceSubscriptionsResp struct {
	Pagination           *ApiprotoPagination                 `json:"Pagination,omitempty"`
	ResourceSubscription *[]ApiprotoResourceSubscriptionResp `json:"ResourceSubscription,omitempty"`
	Resp                 *ApiprotoResponse                   `json:"Resp,omitempty"`
}

// ApiprotoGetResourcesResp defines model for apiprotoGetResourcesResp.
type ApiprotoGetResourcesResp struct {
	Pagination *ApiprotoPagination `json:"Pagination,omitempty"`
	Resources  *[]ApiprotoResource `json:"Resources,omitempty"`
	Resp       *ApiprotoResponse   `json:"Resp,omitempty"`
	Tenant     *string             `json:"Tenant,omitempty"`
}

// ApiprotoGroups defines model for apiprotoGroups.
type ApiprotoGroups struct {
	Group *[]string `json:"group,omitempty"`
}

// ApiprotoLabel defines model for apiprotoLabel.
type ApiprotoLabel struct {
	Key   *string `json:"Key,omitempty"`
	Value *string `json:"Value,omitempty"`
}

// ApiprotoLom defines model for apiprotoLom.
type ApiprotoLom struct {
	ApiKey *string `json:"apiKey,omitempty"`

	// IpAddress This is represents ipAddress for the compute
	IpAddress *string `json:"ipAddress,omitempty"`

	// MacAddress This is represents macAddress for the compute
	MacAddress *string `json:"macAddress,omitempty"`

	// Password Password is the cloudify secret created from compute password
	Password *string `json:"password,omitempty"`
	Port     *int32  `json:"port,omitempty"`
	Protocol *string `json:"protocol,omitempty"`

	// User This is the user name for the compute node
	User *string `json:"user,omitempty"`
}

// ApiprotoOs defines model for apiprotoOs.
type ApiprotoOs struct {
	ConfigData  *string `json:"configData,omitempty"`
	ConfigType  *string `json:"configType,omitempty"`
	Gateway     *string `json:"gateway,omitempty"`
	Hostname    *string `json:"hostname,omitempty"`
	IpAddress   *string `json:"ipAddress,omitempty"`
	MacAddress  *string `json:"macAddress,omitempty"`
	Name        *string `json:"name,omitempty"`
	Nameservers *string `json:"nameservers,omitempty"`
	Netmask     *string `json:"netmask,omitempty"`
	Password    *string `json:"password,omitempty"`
	Release     *string `json:"release,omitempty"`
	SshKey      *string `json:"sshKey,omitempty"`
	User        *string `json:"user,omitempty"`
	Vendor      *string `json:"vendor,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// ApiprotoPagination defines model for apiprotoPagination.
type ApiprotoPagination struct {
	Limit  *int64 `json:"limit,omitempty"`
	Offset *int64 `json:"offset,omitempty"`
	Total  *int64 `json:"total,omitempty"`
}

// ApiprotoResource defines model for apiprotoResource.
type ApiprotoResource struct {
	// Capabilities A dictionary containing an capabilities definition of a deployment.
	Capabilities *map[string]interface{} `json:"Capabilities,omitempty"`
	Deployment   *ApiprotoDeploymentDB   `json:"Deployment,omitempty"`

	// Description A textual description of the resource. This field provides additional details or context about what the resource is or how it should be used.
	Description *string             `json:"Description,omitempty"`
	Elements    *[]ApiprotoResource `json:"Elements,omitempty"`

	// Extensions It is raw json blob that can be provided while creating resource. This can be used to pass any custom data for creating a resource like compute,cloud,etc.
	Extensions *map[string]map[string]interface{} `json:"Extensions,omitempty"`

	// GlobalAssetId Identifier or serial number of the resource. Service tag of the compute resource can be provided as the value for GlobalAsset ID.
	GlobalAssetId *string         `json:"GlobalAssetId,omitempty"`
	Groups        *ApiprotoGroups `json:"Groups,omitempty"`

	// Id A unique identifier for the resource. This ID is required to be a non-empty string.
	Id *string `json:"Id,omitempty"`

	// Labels A list of labels associated with the resource. Labels are key-value pairs that can be used for organizing, searching, or filtering resources. For example: While creating a compute resource which can be tagged with controller label we can add label as key with role and vlaue as controller.
	Labels *[]ApiprotoLabel `json:"Labels,omitempty"`

	// Name Name of the resource
	Name              *string                       `json:"Name,omitempty"`
	Res               *ApiprotoBaseResource         `json:"Res,omitempty"`
	ResType           *ApiprotoResourceResourceType `json:"ResType,omitempty"`
	ResourceAttribute *ApiprotoResourceAttribute    `json:"ResourceAttribute,omitempty"`

	// ResourcePoolId The ID of the resource pool to which this resource belongs. A resource pool is a collection of resources that can be managed together.
	ResourcePoolId *string `json:"ResourcePoolId,omitempty"`

	// ResourceProfileID The ID of the resource profile associated with this resource.
	ResourceProfileID *string `json:"ResourceProfileID,omitempty"`

	// ResourceTypeId This is the deployment ID for resource type data model.
	ResourceTypeId *string `json:"ResourceTypeId,omitempty"`

	// SiteId Id of the site to which this resource belongs
	SiteId *string                   `json:"SiteId,omitempty"`
	Status *ApiprotoDeploymentStatus `json:"Status,omitempty"`

	// Tags A list of tags assigned to the resource. Tags are simple string identifiers that can be used for categorization and searchability.
	Tags *[]string `json:"Tags,omitempty"`

	// Workflow The workflow name to be provided while creating the resource. This is optional. By default the value is 'install'
	Workflow *string              `json:"Workflow,omitempty"`
	AState   *ResourceAdminState  `json:"aState,omitempty"`
	AStatus  *ResourceAdminStatus `json:"aStatus,omitempty"`
	AvStatus *ResourceAvStatus    `json:"avStatus,omitempty"`
	CStatus  *ResourceCStatus     `json:"cStatus,omitempty"`
	OpState  *ResourceOpState     `json:"opState,omitempty"`
	PStatus  *ResourcePStatus     `json:"pStatus,omitempty"`
	Public   *ResourcePublic      `json:"public,omitempty"`
	SStatus  *ResourceSStatus     `json:"sStatus,omitempty"`
	UState   *ResourceUsageState  `json:"uState,omitempty"`
	UStatus  *ResourceUStatus     `json:"uStatus,omitempty"`
}

// ApiprotoResourceAttribute defines model for apiprotoResourceAttribute.
type ApiprotoResourceAttribute struct {
	Cloud   *ApiprotoCloud   `json:"cloud,omitempty"`
	Compute *ApiprotoCompute `json:"compute,omitempty"`
}

// ApiprotoResourceDetails defines model for apiprotoResourceDetails.
type ApiprotoResourceDetails struct {
	Collected  *string `json:"Collected,omitempty"`
	Resource   *string `json:"Resource,omitempty"`
	Subscribed *string `json:"Subscribed,omitempty"`
}

// ApiprotoResourcePool defines model for apiprotoResourcePool.
type ApiprotoResourcePool struct {
	DefaultRp   *bool                     `json:"DefaultRp,omitempty"`
	Description *string                   `json:"Description,omitempty"`
	Extensions  *map[string]ProtobufAny   `json:"Extensions,omitempty"`
	Id          *string                   `json:"Id,omitempty"`
	Labels      *[]ApiprotoLabel          `json:"Labels,omitempty"`
	Name        *string                   `json:"Name,omitempty"`
	Res         *ApiprotoBaseResource     `json:"Res,omitempty"`
	Resources   *[]ApiprotoResource       `json:"Resources,omitempty"`
	SiteId      *string                   `json:"SiteId,omitempty"`
	Status      *ApiprotoDeploymentStatus `json:"Status,omitempty"`
}

// ApiprotoResourcePoolResp defines model for apiprotoResourcePoolResp.
type ApiprotoResourcePoolResp struct {
	ResourcePool *ApiprotoResourcePool `json:"ResourcePool,omitempty"`
	Resp         *ApiprotoResponse     `json:"Resp,omitempty"`
}

// ApiprotoResourcePoolsResp defines model for apiprotoResourcePoolsResp.
type ApiprotoResourcePoolsResp struct {
	Pagination    *ApiprotoPagination     `json:"Pagination,omitempty"`
	ResourcePools *[]ApiprotoResourcePool `json:"ResourcePools,omitempty"`
	Resp          *ApiprotoResponse       `json:"Resp,omitempty"`
}

// ApiprotoResourceResourceType defines model for apiprotoResourceResourceType.
type ApiprotoResourceResourceType = interface{}

// ApiprotoResourceSubscriptionResp defines model for apiprotoResourceSubscriptionResp.
type ApiprotoResourceSubscriptionResp struct {
	CollectorId *string                    `json:"CollectorId,omitempty"`
	Description *string                    `json:"Description,omitempty"`
	Id          *string                    `json:"Id,omitempty"`
	Name        *string                    `json:"Name,omitempty"`
	Resources   *[]ApiprotoResourceDetails `json:"Resources,omitempty"`
	SiteId      *string                    `json:"SiteId,omitempty"`
}

// ApiprotoResourceSubscriptionsFilter defines model for apiprotoResourceSubscriptionsFilter.
type ApiprotoResourceSubscriptionsFilter struct {
	CollectorId *string `json:"CollectorId,omitempty"`
	SiteId      *string `json:"SiteId,omitempty"`
}

// ApiprotoResponse defines model for apiprotoResponse.
type ApiprotoResponse struct {
	DebugMsg *string                 `json:"debugMsg,omitempty"`
	ErrorMsg *string                 `json:"errorMsg,omitempty"`
	Id       *string                 `json:"id,omitempty"`
	Jobid    *string                 `json:"jobid,omitempty"`
	Status   *ApiprotoResponseStatus `json:"status,omitempty"`
}

// ApiprotoResponseStatus defines model for apiprotoResponseStatus.
type ApiprotoResponseStatus = interface{}

// ApiprotoSubscribeResourcesResp defines model for apiprotoSubscribeResourcesResp.
type ApiprotoSubscribeResourcesResp struct {
	Resp   *ApiprotoResponse `json:"Resp,omitempty"`
	Tenant *string           `json:"Tenant,omitempty"`
}

// ApiprotoUnsubscribeResourcesResp defines model for apiprotoUnsubscribeResourcesResp.
type ApiprotoUnsubscribeResourcesResp struct {
	Resp   *ApiprotoResponse `json:"Resp,omitempty"`
	Tenant *string           `json:"Tenant,omitempty"`
}

// ApiprotoUpdateResource defines model for apiprotoUpdateResource.
type ApiprotoUpdateResource struct {
	// Op The operation to be performed on the resource, typically specifying the type of update. Common values might include 'replace', 'add', or 'remove', depending on the desired modification.
	Op *string `json:"Op,omitempty"`

	// Path A string representing the JSON Pointer syntax to specify the exact location within the resource where the update will be applied. This allows the system to precisely identify which field or attribute is being updated.
	Path *string `json:"Path,omitempty"`

	// Value The new value(s) to be applied at the specified path as part of the update operation. This could be a single value or a complex object, depending on the nature of the update.
	Value *[]map[string]interface{} `json:"Value,omitempty"`
}

// ApiprotoUpdateResourceResp defines model for apiprotoUpdateResourceResp.
type ApiprotoUpdateResourceResp struct {
	Resource *ApiprotoResource `json:"Resource,omitempty"`
	Response *ApiprotoResponse `json:"Response,omitempty"`
	Tenant   *string           `json:"Tenant,omitempty"`
}

// GooglerpcStatus defines model for googlerpcStatus.
type GooglerpcStatus struct {
	Code    *int32         `json:"code,omitempty"`
	Details *[]ProtobufAny `json:"details,omitempty"`
	Message *string        `json:"message,omitempty"`
}

// ProtobufAny `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//	Foo foo = ...;
//	Any any;
//	any.PackFrom(foo);
//	...
//	if (any.UnpackTo(&foo)) {
//	  ...
//	}
//
// Example 2: Pack and unpack a message in Java.
//
//	   Foo foo = ...;
//	   Any any = Any.pack(foo);
//	   ...
//	   if (any.is(Foo.class)) {
//	     foo = any.unpack(Foo.class);
//	   }
//
//	Example 3: Pack and unpack a message in Python.
//
//	   foo = Foo(...)
//	   any = Any()
//	   any.Pack(foo)
//	   ...
//	   if any.Is(Foo.DESCRIPTOR):
//	     any.Unpack(foo)
//	     ...
//
//	Example 4: Pack and unpack a message in Go
//
//	    foo := &pb.Foo{...}
//	    any, err := anypb.New(foo)
//	    if err != nil {
//	      ...
//	    }
//	    ...
//	    foo := &pb.Foo{}
//	    if err := any.UnmarshalTo(foo); err != nil {
//	      ...
//	    }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//	package google.profile;
//	message Person {
//	  string first_name = 1;
//	  string last_name = 2;
//	}
//
//	{
//	  "@type": "type.googleapis.com/google.profile.Person",
//	  "firstName": <string>,
//	  "lastName": <string>
//	}
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//	{
//	  "@type": "type.googleapis.com/google.protobuf.Duration",
//	  "value": "1.212s"
//	}
type ProtobufAny struct {
	// Type A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	Type *string `json:"@type,omitempty"`
}

// RhprotoCreateResourceGroupReqBody defines model for rhprotoCreateResourceGroupReqBody.
type RhprotoCreateResourceGroupReqBody struct {
	Tenant        *string                            `json:"Tenant,omitempty"`
	ResourceGroup *RhprotoResourceGroupObjectRequest `json:"resourceGroup,omitempty"`
}

// RhprotoGetSecretsResponseBody defines model for rhprotoGetSecretsResponseBody.
type RhprotoGetSecretsResponseBody struct {
	Secret *RhprotoSecret `json:"secret,omitempty"`
}

// RhprotoGetTokenReqBody defines model for rhprotoGetTokenReqBody.
type RhprotoGetTokenReqBody struct {
	ClientId  *string `json:"client_id,omitempty"`
	GrantType *string `json:"grant_type,omitempty"`
	Password  *string `json:"password,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// RhprotoGetTokenResponseBody defines model for rhprotoGetTokenResponseBody.
type RhprotoGetTokenResponseBody struct {
	AccessToken      *string `json:"access_token,omitempty"`
	ExpiresIn        *int64  `json:"expires_in,omitempty"`
	IdToken          *string `json:"id_token,omitempty"`
	RefreshExpiresIn *int64  `json:"refresh_expires_in,omitempty"`
	RefreshToken     *string `json:"refresh_token,omitempty"`
	Scope            *string `json:"scope,omitempty"`
	SessionState     *string `json:"session_state,omitempty"`
	TokenType        *string `json:"token_type,omitempty"`
}

// RhprotoGooglerpcStatus defines model for rhprotoGooglerpcStatus.
type RhprotoGooglerpcStatus struct {
	Code    *int32                  `json:"code,omitempty"`
	Details *map[string]interface{} `json:"details,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

// RhprotoJobStatus defines model for rhprotoJobStatus.
type RhprotoJobStatus struct {
	Brief *RhprotoJobStatusBrief `json:"brief,omitempty"`
}

// RhprotoJobStatusBrief defines model for rhprotoJobStatusBrief.
type RhprotoJobStatusBrief struct {
	FailReason *string `json:"FailReason,omitempty"`
	Id         *string `json:"Id,omitempty"`
	StartTime  *string `json:"StartTime,omitempty"`
	Status     *string `json:"Status,omitempty"`
}

// RhprotoResource defines model for rhprotoResource.
type RhprotoResource struct {
	Capabilities      *map[string]interface{}            `json:"Capabilities,omitempty"`
	Deployment        *string                            `json:"Deployment,omitempty"`
	Description       *string                            `json:"Description,omitempty"`
	Elements          *[]ApiprotoResource                `json:"Elements,omitempty"`
	Extensions        *map[string]map[string]interface{} `json:"Extensions,omitempty"`
	GlobalAssetId     *string                            `json:"GlobalAssetId,omitempty"`
	Groups            *ApiprotoGroups                    `json:"Groups,omitempty"`
	Id                *string                            `json:"Id,omitempty"`
	Labels            *[]ApiprotoLabel                   `json:"Labels,omitempty"`
	Name              *string                            `json:"Name,omitempty"`
	Res               *ApiprotoBaseResource              `json:"Res,omitempty"`
	ResType           *ApiprotoResourceResourceType      `json:"ResType,omitempty"`
	ResourceAttribute *ApiprotoResourceAttribute         `json:"ResourceAttribute,omitempty"`
	ResourcePoolId    *string                            `json:"ResourcePoolId,omitempty"`
	ResourceProfileID *string                            `json:"ResourceProfileID,omitempty"`
	ResourceTypeId    *string                            `json:"ResourceTypeId,omitempty"`
	SiteId            *string                            `json:"SiteId,omitempty"`
	Status            *ApiprotoDeploymentStatus          `json:"Status,omitempty"`
	Tags              *[]string                          `json:"Tags,omitempty"`
	Workflow          *string                            `json:"Workflow,omitempty"`
	AState            *ResourceAdminState                `json:"aState,omitempty"`
	AStatus           *ResourceAdminStatus               `json:"aStatus,omitempty"`
	AvStatus          *ResourceAvStatus                  `json:"avStatus,omitempty"`
	CStatus           *ResourceCStatus                   `json:"cStatus,omitempty"`
	OpState           *ResourceOpState                   `json:"opState,omitempty"`
	PStatus           *ResourcePStatus                   `json:"pStatus,omitempty"`
	Public            *ResourcePublic                    `json:"public,omitempty"`
	SStatus           *ResourceSStatus                   `json:"sStatus,omitempty"`
	UState            *ResourceUsageState                `json:"uState,omitempty"`
	UStatus           *ResourceUStatus                   `json:"uStatus,omitempty"`
}

// RhprotoResourceGroupObjectGetResponseBody defines model for rhprotoResourceGroupObjectGetResponseBody.
type RhprotoResourceGroupObjectGetResponseBody struct {
	Description       *string                                        `json:"description,omitempty"`
	Id                *string                                        `json:"id,omitempty"`
	Name              *string                                        `json:"name,omitempty"`
	ResourceSelectors *map[string]RhprotoResourceSelectorGetResponse `json:"resourceSelectors,omitempty"`
	ResourceTypeId    *string                                        `json:"resourceTypeId,omitempty"`
}

// RhprotoResourceGroupObjectRequest defines model for rhprotoResourceGroupObjectRequest.
type RhprotoResourceGroupObjectRequest struct {
	Description       *string                                    `json:"description,omitempty"`
	Id                *string                                    `json:"id,omitempty"`
	Name              *string                                    `json:"name,omitempty"`
	ResourceSelectors *map[string]RhprotoResourceSelectorRequest `json:"resourceSelectors,omitempty"`
	ResourceTypeId    *string                                    `json:"resourceTypeId,omitempty"`
}

// RhprotoResourceSelectorFilter defines model for rhprotoResourceSelectorFilter.
type RhprotoResourceSelectorFilter struct {
	Exclude *map[string]interface{}               `json:"exclude,omitempty"`
	Include *RhprotoResourceSelectorFilterInclude `json:"include,omitempty"`
}

// RhprotoResourceSelectorFilterInclude defines model for rhprotoResourceSelectorFilterInclude.
type RhprotoResourceSelectorFilterInclude struct {
	Labels *[]RhprotoResourceSelectorFilterIncludeLabel `json:"labels,omitempty"`
}

// RhprotoResourceSelectorFilterIncludeLabel defines model for rhprotoResourceSelectorFilterIncludeLabel.
type RhprotoResourceSelectorFilterIncludeLabel struct {
	Key   *string `json:"Key,omitempty"`
	Value *string `json:"Value,omitempty"`
}

// RhprotoResourceSelectorGetResponse defines model for rhprotoResourceSelectorGetResponse.
type RhprotoResourceSelectorGetResponse struct {
	ResourceProfileId *string `json:"ResourceProfileId,omitempty"`
	Filters           *struct {
		Exclude *map[string]interface{} `json:"exclude,omitempty"`
		Include *struct {
			Labels *[]struct {
				Key   *string `json:"Key,omitempty"`
				Value *string `json:"Value,omitempty"`
			} `json:"labels,omitempty"`
		} `json:"include,omitempty"`
	} `json:"filters,omitempty"`
	NumResources *float32           `json:"numResources,omitempty"`
	Resources    *[]RhprotoResource `json:"resources,omitempty"`
	RpId         *string            `json:"rpId,omitempty"`
}

// RhprotoResourceSelectorRequest defines model for rhprotoResourceSelectorRequest.
type RhprotoResourceSelectorRequest struct {
	ResourceProfileId *string                        `json:"ResourceProfileId,omitempty"`
	Filters           *RhprotoResourceSelectorFilter `json:"filters,omitempty"`
	NumResources      *int                           `json:"numResources,omitempty"`
	RpId              *string                        `json:"rpId,omitempty"`
}

// RhprotoSecret defines model for rhprotoSecret.
type RhprotoSecret struct {
	CreatedAt     *string `json:"CreatedAt,omitempty"`
	CreatedBy     *string `json:"CreatedBy,omitempty"`
	IsHiddenValue *bool   `json:"IsHiddenValue,omitempty"`
	Key           *string `json:"Key,omitempty"`
	Tenant        *string `json:"Tenant,omitempty"`
	UpdatedAt     *string `json:"UpdatedAt,omitempty"`
	Value         *string `json:"Value,omitempty"`
	Visibility    *string `json:"Visibility,omitempty"`
}

// GetResourcePoolsBody defines model for GetResourcePoolsBody.
type GetResourcePoolsBody struct {
	Filters    *[]ApiprotoFilter   `json:"Filters,omitempty"`
	Pagination *ApiprotoPagination `json:"Pagination,omitempty"`
}

// SubscribeResourcesBody defines model for SubscribeResourcesBody.
type SubscribeResourcesBody struct {
	Id        *string   `json:"Id,omitempty"`
	Resources *[]string `json:"Resources,omitempty"`
}

// CreateResourcePoolJSONBody defines parameters for CreateResourcePool.
type CreateResourcePoolJSONBody struct {
	ResourcePool *ApiprotoResourcePool `json:"ResourcePool,omitempty"`
}

// DeleteResourcePoolParams defines parameters for DeleteResourcePool.
type DeleteResourcePoolParams struct {
	// Force Example: true
	Force *bool `form:"Force,omitempty" json:"Force,omitempty"`

	// DeleteLogs Example: true
	DeleteLogs *bool `form:"DeleteLogs,omitempty" json:"DeleteLogs,omitempty"`
}

// UpdateResourceJSONBody defines parameters for UpdateResource.
type UpdateResourceJSONBody struct {
	Resource *[]ApiprotoUpdateResource `json:"Resource,omitempty"`

	// ResourceName Name of the resource to be updated
	ResourceName *string `json:"ResourceName,omitempty"`
}

// CreateResourceJSONBody defines parameters for CreateResource.
type CreateResourceJSONBody struct {
	Resource *ApiprotoResource `json:"Resource,omitempty"`
}

// DeleteResourceParams defines parameters for DeleteResource.
type DeleteResourceParams struct {
	// Force Example: true
	Force *bool `form:"Force,omitempty" json:"Force,omitempty"`

	// DeleteLogs Example: true
	DeleteLogs *bool `form:"DeleteLogs,omitempty" json:"DeleteLogs,omitempty"`
}

// SubscribeResourcesJSONBody defines parameters for SubscribeResources.
type SubscribeResourcesJSONBody struct {
	Id        *string   `json:"Id,omitempty"`
	Resources *[]string `json:"Resources,omitempty"`
}

// UnsubscribeResourcesJSONBody defines parameters for UnsubscribeResources.
type UnsubscribeResourcesJSONBody struct {
	Id        *string   `json:"Id,omitempty"`
	Resources *[]string `json:"Resources,omitempty"`
}

// GetResourcePoolsJSONBody defines parameters for GetResourcePools.
type GetResourcePoolsJSONBody struct {
	Filters    *[]ApiprotoFilter   `json:"Filters,omitempty"`
	Pagination *ApiprotoPagination `json:"Pagination,omitempty"`
}

// GetResourcesJSONBody defines parameters for GetResources.
type GetResourcesJSONBody struct {
	Filters    *[]ApiprotoFilter   `json:"Filters,omitempty"`
	Pagination *ApiprotoPagination `json:"Pagination,omitempty"`
}

// GetResourceSubscriptionsJSONBody defines parameters for GetResourceSubscriptions.
type GetResourceSubscriptionsJSONBody struct {
	Filters    *ApiprotoResourceSubscriptionsFilter `json:"Filters,omitempty"`
	Pagination *ApiprotoPagination                  `json:"Pagination,omitempty"`
}

// GetTokenJSONRequestBody defines body for GetToken for application/json ContentType.
type GetTokenJSONRequestBody = RhprotoGetTokenReqBody

// CreateResourceGroupJSONRequestBody defines body for CreateResourceGroup for application/json ContentType.
type CreateResourceGroupJSONRequestBody = RhprotoCreateResourceGroupReqBody

// CreateResourcePoolJSONRequestBody defines body for CreateResourcePool for application/json ContentType.
type CreateResourcePoolJSONRequestBody CreateResourcePoolJSONBody

// UpdateResourceJSONRequestBody defines body for UpdateResource for application/json ContentType.
type UpdateResourceJSONRequestBody UpdateResourceJSONBody

// CreateResourceJSONRequestBody defines body for CreateResource for application/json ContentType.
type CreateResourceJSONRequestBody CreateResourceJSONBody

// SubscribeResourcesJSONRequestBody defines body for SubscribeResources for application/json ContentType.
type SubscribeResourcesJSONRequestBody SubscribeResourcesJSONBody

// UnsubscribeResourcesJSONRequestBody defines body for UnsubscribeResources for application/json ContentType.
type UnsubscribeResourcesJSONRequestBody UnsubscribeResourcesJSONBody

// GetResourcePoolsJSONRequestBody defines body for GetResourcePools for application/json ContentType.
type GetResourcePoolsJSONRequestBody GetResourcePoolsJSONBody

// GetResourcesJSONRequestBody defines body for GetResources for application/json ContentType.
type GetResourcesJSONRequestBody GetResourcesJSONBody

// GetResourceSubscriptionsJSONRequestBody defines body for GetResourceSubscriptions for application/json ContentType.
type GetResourceSubscriptionsJSONRequestBody GetResourceSubscriptionsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Token
	// (POST /identity/v1/tenant/Fulcrum/token/create)
	GetToken(w http.ResponseWriter, r *http.Request)
	// Verify Request Status
	// (GET /v1/tenants/{Tenant}/jobs/{jobid})
	VerifyRequestStatus(w http.ResponseWriter, r *http.Request, tenant string, jobid string)
	// Create Resource Group
	// (POST /v1/tenants/{Tenant}/resourcegroups)
	CreateResourceGroup(w http.ResponseWriter, r *http.Request, tenant string)
	// Delete Resource Group
	// (DELETE /v1/tenants/{Tenant}/resourcegroups/{resource-group-id})
	DeleteResourceGroup(w http.ResponseWriter, r *http.Request, tenant string, resourceGroupId string)
	// Get Resource Group
	// (GET /v1/tenants/{Tenant}/resourcegroups/{resource-group-id})
	GetResourceGroup(w http.ResponseWriter, r *http.Request, tenant string, resourceGroupId string)
	// Create a resource pool
	// (POST /v1/tenants/{Tenant}/resourcepools)
	CreateResourcePool(w http.ResponseWriter, r *http.Request, tenant string)
	// Delete a resource pool
	// (DELETE /v1/tenants/{Tenant}/resourcepools/{ResourcePoolId})
	DeleteResourcePool(w http.ResponseWriter, r *http.Request, tenant string, resourcePoolId string, params DeleteResourcePoolParams)
	// Update a resource
	// (PATCH /v1/tenants/{Tenant}/resources)
	UpdateResource(w http.ResponseWriter, r *http.Request, tenant string)
	// Create a resource
	// (POST /v1/tenants/{Tenant}/resources)
	CreateResource(w http.ResponseWriter, r *http.Request, tenant string)
	// Get a resource deployment
	// (GET /v1/tenants/{Tenant}/resources/{Id}/deployments)
	GetResourceDeployments(w http.ResponseWriter, r *http.Request, tenant string, id string)
	// Delete a resource
	// (DELETE /v1/tenants/{Tenant}/resources/{ResourceId})
	DeleteResource(w http.ResponseWriter, r *http.Request, tenant string, resourceId string, params DeleteResourceParams)
	// Subscribe resources for telemetry
	// (PATCH /v1/tenants/{Tenant}/resourcesubscriptions/resources/subscribe)
	SubscribeResources(w http.ResponseWriter, r *http.Request, tenant string)
	// Unsubscribe resources from telemetry
	// (PATCH /v1/tenants/{Tenant}/resourcesubscriptions/resources/unsubscribe)
	UnsubscribeResources(w http.ResponseWriter, r *http.Request, tenant string)
	// Retrieve resource pools
	// (POST /v1/tenants/{Tenant}/search/resourcepools)
	GetResourcePools(w http.ResponseWriter, r *http.Request, tenant string)
	// Retrieve a resource pool
	// (GET /v1/tenants/{Tenant}/search/resourcepools/{Id})
	GetResourcePool(w http.ResponseWriter, r *http.Request, tenant string, id string)
	// Retrieve resources
	// (POST /v1/tenants/{Tenant}/search/resources)
	GetResources(w http.ResponseWriter, r *http.Request, tenant string)
	// Retrieve a resource
	// (GET /v1/tenants/{Tenant}/search/resources/{Id})
	GetResource(w http.ResponseWriter, r *http.Request, tenant string, id string)
	// Get resource subscriptions
	// (POST /v1/tenants/{Tenant}/search/resourcesubscriptions)
	GetResourceSubscriptions(w http.ResponseWriter, r *http.Request, tenant string)
	// Get resource subscription
	// (GET /v1/tenants/{Tenant}/search/resourcesubscriptions/{Id})
	GetResourceSubscription(w http.ResponseWriter, r *http.Request, tenant string, id string)
	// GetSecrets
	// (GET /v1/tenants/{Tenant}/secrets/{secret-key})
	GetSecrets(w http.ResponseWriter, r *http.Request, tenant string, secretKey string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetToken operation middleware
func (siw *ServerInterfaceWrapper) GetToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// VerifyRequestStatus operation middleware
func (siw *ServerInterfaceWrapper) VerifyRequestStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	// ------------- Path parameter "jobid" -------------
	var jobid string

	err = runtime.BindStyledParameterWithOptions("simple", "jobid", mux.Vars(r)["jobid"], &jobid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "jobid", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyRequestStatus(w, r, tenant, jobid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateResourceGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateResourceGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateResourceGroup(w, r, tenant)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteResourceGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteResourceGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	// ------------- Path parameter "resource-group-id" -------------
	var resourceGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource-group-id", mux.Vars(r)["resource-group-id"], &resourceGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resource-group-id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteResourceGroup(w, r, tenant, resourceGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourceGroup operation middleware
func (siw *ServerInterfaceWrapper) GetResourceGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	// ------------- Path parameter "resource-group-id" -------------
	var resourceGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource-group-id", mux.Vars(r)["resource-group-id"], &resourceGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resource-group-id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourceGroup(w, r, tenant, resourceGroupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateResourcePool operation middleware
func (siw *ServerInterfaceWrapper) CreateResourcePool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateResourcePool(w, r, tenant)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteResourcePool operation middleware
func (siw *ServerInterfaceWrapper) DeleteResourcePool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	// ------------- Path parameter "ResourcePoolId" -------------
	var resourcePoolId string

	err = runtime.BindStyledParameterWithOptions("simple", "ResourcePoolId", mux.Vars(r)["ResourcePoolId"], &resourcePoolId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ResourcePoolId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteResourcePoolParams

	// ------------- Optional query parameter "Force" -------------

	err = runtime.BindQueryParameter("form", true, false, "Force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Force", Err: err})
		return
	}

	// ------------- Optional query parameter "DeleteLogs" -------------

	err = runtime.BindQueryParameter("form", true, false, "DeleteLogs", r.URL.Query(), &params.DeleteLogs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "DeleteLogs", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteResourcePool(w, r, tenant, resourcePoolId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateResource operation middleware
func (siw *ServerInterfaceWrapper) UpdateResource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateResource(w, r, tenant)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateResource operation middleware
func (siw *ServerInterfaceWrapper) CreateResource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateResource(w, r, tenant)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourceDeployments operation middleware
func (siw *ServerInterfaceWrapper) GetResourceDeployments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "Id", mux.Vars(r)["Id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourceDeployments(w, r, tenant, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteResource operation middleware
func (siw *ServerInterfaceWrapper) DeleteResource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	// ------------- Path parameter "ResourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "ResourceId", mux.Vars(r)["ResourceId"], &resourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ResourceId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteResourceParams

	// ------------- Optional query parameter "Force" -------------

	err = runtime.BindQueryParameter("form", true, false, "Force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Force", Err: err})
		return
	}

	// ------------- Optional query parameter "DeleteLogs" -------------

	err = runtime.BindQueryParameter("form", true, false, "DeleteLogs", r.URL.Query(), &params.DeleteLogs)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "DeleteLogs", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteResource(w, r, tenant, resourceId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SubscribeResources operation middleware
func (siw *ServerInterfaceWrapper) SubscribeResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SubscribeResources(w, r, tenant)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnsubscribeResources operation middleware
func (siw *ServerInterfaceWrapper) UnsubscribeResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnsubscribeResources(w, r, tenant)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourcePools operation middleware
func (siw *ServerInterfaceWrapper) GetResourcePools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourcePools(w, r, tenant)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourcePool operation middleware
func (siw *ServerInterfaceWrapper) GetResourcePool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "Id", mux.Vars(r)["Id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourcePool(w, r, tenant, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResources operation middleware
func (siw *ServerInterfaceWrapper) GetResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResources(w, r, tenant)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResource operation middleware
func (siw *ServerInterfaceWrapper) GetResource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "Id", mux.Vars(r)["Id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResource(w, r, tenant, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourceSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetResourceSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourceSubscriptions(w, r, tenant)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourceSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetResourceSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "Id", mux.Vars(r)["Id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourceSubscription(w, r, tenant, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSecrets operation middleware
func (siw *ServerInterfaceWrapper) GetSecrets(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "Tenant" -------------
	var tenant string

	err = runtime.BindStyledParameterWithOptions("simple", "Tenant", mux.Vars(r)["Tenant"], &tenant, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Tenant", Err: err})
		return
	}

	// ------------- Path parameter "secret-key" -------------
	var secretKey string

	err = runtime.BindStyledParameterWithOptions("simple", "secret-key", mux.Vars(r)["secret-key"], &secretKey, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "secret-key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSecrets(w, r, tenant, secretKey)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/identity/v1/tenant/Fulcrum/token/create", wrapper.GetToken).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/jobs/{jobid}", wrapper.VerifyRequestStatus).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resourcegroups", wrapper.CreateResourceGroup).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resourcegroups/{resource-group-id}", wrapper.DeleteResourceGroup).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resourcegroups/{resource-group-id}", wrapper.GetResourceGroup).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resourcepools", wrapper.CreateResourcePool).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resourcepools/{ResourcePoolId}", wrapper.DeleteResourcePool).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resources", wrapper.UpdateResource).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resources", wrapper.CreateResource).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resources/{Id}/deployments", wrapper.GetResourceDeployments).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resources/{ResourceId}", wrapper.DeleteResource).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resourcesubscriptions/resources/subscribe", wrapper.SubscribeResources).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/resourcesubscriptions/resources/unsubscribe", wrapper.UnsubscribeResources).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/search/resourcepools", wrapper.GetResourcePools).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/search/resourcepools/{Id}", wrapper.GetResourcePool).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/search/resources", wrapper.GetResources).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/search/resources/{Id}", wrapper.GetResource).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/search/resourcesubscriptions", wrapper.GetResourceSubscriptions).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/search/resourcesubscriptions/{Id}", wrapper.GetResourceSubscription).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v1/tenants/{Tenant}/secrets/{secret-key}", wrapper.GetSecrets).Methods("GET")

	return r
}
